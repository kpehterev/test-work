openapi: '3.0.2'
info:
  title: Сервис
  version: '1.0'

tags:
  - name: "Authorization"
    description: "Авторизация и аутентификация"
  - name: "User"
    description: "Пользователь"
  - name: "Account"
    description: "Счет пользователя"
  - name: "EmailData"
    description: "Почта пользователя"
  - name: "PhoneData"
    description: "Телефон пользователя"

paths:
  /login:
    post:
      operationId: login
      tags:
        - Authorization
      summary: Авторизация пользователя в системе
      requestBody:
        description: Данные пользователя для авторизации
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredits'
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokens'
        '401':
          description: Неверный логин или пароль

  /refresh:
    post:
      operationId: refresh
      tags:
        - Authorization
      summary: Метод обновления токенов
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Ранее выданный refresh токен
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTokens'
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokens'
        '401':
          description: Не валидный токен

  /users/create:
    post:
      operationId: createUser
      tags:
        - User
      summary: Создание нового пользователя (только для внутреннего использования)
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Данные для создания пользователя
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Неверные данные пользователя
        '409':
          description: Email или телефон уже заняты

  /users/update/{userId}:
    put:
      operationId: updateUser
      tags:
        - User
      summary: Обновление данных пользователя
      description: Пользователь может обновить свои данные (email и телефон). Email и телефон должны быть уникальными.
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Идентификатор пользователя
      requestBody:
        description: Данные для обновления пользователя
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Данные пользователя успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Неверные данные пользователя
        '403':
          description: Запрещено обновлять данные другого пользователя
        '404':
          description: Пользователь не найден
        '409':
          description: Email или телефон уже заняты

  /users/search:
    get:
      operationId: searchUsers
      tags:
        - User
      summary: Поиск пользователей с фильтрацией и пагинацией
      description: |
        Поиск пользователей с возможностью фильтрации по полям:
        - `dateOfBirth`: фильтр записей, где `dateOfBirth` больше переданного значения.
        - `phone`: фильтр по 100% сходству.
        - `name`: фильтр по like формату `{text-from-request-param}%`.
        - `email`: фильтр по 100% сходству.
      security:
        - BearerAuth: []
      parameters:
        - name: dateOfBirth
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Фильтр по дате рождения (больше указанной даты)
        - name: phone
          in: query
          required: false
          schema:
            type: string
          description: Фильтр по телефону (100% сходство)
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: Фильтр по имени (like формату `{text-from-request-param}%`)
        - name: email
          in: query
          required: false
          schema:
            type: string
            format: email
          description: Фильтр по email (100% сходство)
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
          description: Номер страницы (начиная с 0)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Размер страницы (количество записей на странице)
      responses:
        '200':
          description: Успешный поиск пользователей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageUser'
        '400':
          description: Неверные параметры запроса
        '401':
          description: Не авторизован
        '403':
          description: Нет прав доступа

  /account/transfer:
    post:
      operationId: transferMoney
      tags:
        - Account
      summary: Перевод денег между пользователями
      description: |
        Перевод денег от авторизованного пользователя (USER_ID берется из токена) к другому пользователю (USER_ID передается в запросе).
        Операция является "банковской" и защищена от конкурентных запросов.
      security:
        - BearerAuth: []
      requestBody:
        description: Данные для перевода денег
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200':
          description: Успешный перевод денег
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
        '400':
          description: Неверные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackendErrorResponse'
        '401':
          description: Не авторизован
        '403':
          description: Нет прав доступа
        '404':
          description: Пользователь или счет не найден
        '409':
          description: Конфликт (например, недостаточно средств)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackendErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    BackendErrorResponse:
      type: object
      properties:
        title:
          type: string
          nullable: false
        message:
          type: string
          nullable: false
        errors:
          type: object
          nullable: true
          properties:
            fieldName:
              type: array
              nullable: false
              items:
                type: string
                nullable: false
          required:
            - fieldName
      required:
        - title
        - message
        - errors

    UserCredits:
      type: object
      properties:
        login:
          type: string
          description: Логин пользователя
          nullable: false
          example: example@mail.com
        password:
          type: string
          format: password
          description: Пароль пользователя
    
    UserTokens:
      type: object
      description: Объект с токенами для авторизованного пользователя
      nullable: false
      properties:
        accessToken:
          type: string
          format: jwt
          description: Токен доступа
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        refreshToken:
          type: string
          format: jwt
          description: Токен обновления
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
      required:
        - accessToken
        - refreshToken

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор пользователя
        name:
          type: string
          maxLength: 500
          description: Имя пользователя
        dateOfBirth:
          type: string
          format: date
          description: Дата рождения пользователя в формате `YYYY-MM-DD`
        password:
          type: string
          maxLength: 500
          description: Пароль пользователя (минимум 8 символов)
        account:
          $ref: '#/components/schemas/Account'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/EmailData'
          description: Список email-адресов пользователя
        phones:
          type: array
          items:
            $ref: '#/components/schemas/PhoneData'
          description: Список телефонных номеров пользователя
      required:
        - id
        - name
        - dateOfBirth
        - password
        - account
        - emails
        - phones

    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор аккаунта
        userId:
          type: integer
          format: int64
          description: Идентификатор пользователя, связанного с аккаунтом
        balance:
          type: number
          format: double
          description: Баланс аккаунта (в рублях и копейках)
      required:
        - id
        - userId
        - balance

    EmailData:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор email-адреса
        userId:
          type: integer
          format: int64
          description: Идентификатор пользователя, связанного с email-адресом
        email:
          type: string
          maxLength: 200
          description: Email-адрес пользователя
      required:
        - id
        - userId
        - email

    PhoneData:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор телефонного номера
        userId:
          type: integer
          format: int64
          description: Идентификатор пользователя, связанного с телефонным номером
        phone:
          type: string
          maxLength: 13
          description: Телефонный номер пользователя в формате `79201234567`
      required:
        - id
        - userId
        - phone

    UserCreateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 500
          description: Имя пользователя
          example: "Иван Иванов"
        dateOfBirth:
          type: string
          format: date
          description: Дата рождения пользователя в формате `YYYY-MM-DD`
          example: "1990-01-01"
        password:
          type: string
          minLength: 8
          maxLength: 500
          description: Пароль пользователя (минимум 8 символов)
          example: "securepassword123"
        initialBalance:
          type: number
          format: double
          minimum: 0.00
          description: Начальный баланс аккаунта (в рублях и копейках)
          example: 1000.50
        emails:
          type: array
          items:
            type: string
            format: email
            description: Email-адрес пользователя
          minItems: 1
          description: Список email-адресов пользователя
          example: ["ivan@example.com"]
        phones:
          type: array
          items:
            type: string
            pattern: '^79\d{9}$'
            description: Телефонный номер пользователя в формате `79201234567`
          minItems: 1
          description: Список телефонных номеров пользователя
          example: ["79201234567"]
      required:
        - name
        - dateOfBirth
        - password
        - initialBalance
        - emails
        - phones

    UserUpdateRequest:
      type: object
      properties:
        emails:
          type: array
          items:
            type: string
            format: email
            description: Email-адрес пользователя
          minItems: 1
          description: Список email-адресов пользователя
          example: ["ivan@example.com", "ivan.new@example.com"]
        phones:
          type: array
          items:
            type: string
            pattern: '^79\d{9}$'
            description: Телефонный номер пользователя в формате `79201234567`
          minItems: 1
          description: Список телефонных номеров пользователя
          example: ["79201234567", "79207654321"]
      required:
        - emails
        - phones

    PageUser:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
            pageSize:
              type: integer
            sort:
              type: object
              properties:
                sorted:
                  type: boolean
                unsorted:
                  type: boolean
                empty:
                  type: boolean
          description: Информация о пагинации
        totalPages:
          type: integer
        totalElements:
          type: integer
        last:
          type: boolean
        size:
          type: integer
        number:
          type: integer
        sort:
          type: object
          properties:
            sorted:
              type: boolean
            unsorted:
              type: boolean
            empty:
              type: boolean
        numberOfElements:
          type: integer
        first:
          type: boolean
        empty:
          type: boolean

    TransferRequest:
      type: object
      properties:
        toUserId:
          type: integer
          format: int64
          description: Идентификатор пользователя, которому переводятся деньги
          example: 2
        value:
          type: number
          format: double
          minimum: 0.01
          description: Сумма перевода (в рублях и копейках)
          example: 100.50
      required:
        - toUserId
        - value

    TransferResponse:
      type: object
      properties:
        fromUserId:
          type: integer
          format: int64
          description: Идентификатор пользователя, который переводит деньги
          example: 1
        toUserId:
          type: integer
          format: int64
          description: Идентификатор пользователя, которому переведены деньги
          example: 2
        value:
          type: number
          format: double
          description: Сумма перевода (в рублях и копейках)
          example: 100.50
        newBalanceFrom:
          type: number
          format: double
          description: Новый баланс отправителя
          example: 900.50
        newBalanceTo:
          type: number
          format: double
          description: Новый баланс получателя
          example: 1100.50
      required:
        - fromUserId
        - toUserId
        - value
        - newBalanceFrom
        - newBalanceTo